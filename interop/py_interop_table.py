# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_py_interop_table')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_py_interop_table')
    _py_interop_table = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_py_interop_table', [dirname(__file__)])
        except ImportError:
            import _py_interop_table
            return _py_interop_table
        try:
            _mod = imp.load_module('_py_interop_table', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _py_interop_table = swig_import_helper()
    del swig_import_helper
else:
    import _py_interop_table
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _py_interop_table.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _py_interop_table.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _py_interop_table.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _py_interop_table.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _py_interop_table.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _py_interop_table.SwigPyIterator_equal(self, x)

    def copy(self):
        return _py_interop_table.SwigPyIterator_copy(self)

    def next(self):
        return _py_interop_table.SwigPyIterator_next(self)

    def __next__(self):
        return _py_interop_table.SwigPyIterator___next__(self)

    def previous(self):
        return _py_interop_table.SwigPyIterator_previous(self)

    def advance(self, n):
        return _py_interop_table.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _py_interop_table.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _py_interop_table.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _py_interop_table.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _py_interop_table.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _py_interop_table.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _py_interop_table.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _py_interop_table.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import interop.py_interop_run
import interop.py_interop_metrics
import interop.py_interop_run_metrics
import interop.py_interop_comm
class map_id_offset(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, map_id_offset, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, map_id_offset, name)
    __repr__ = _swig_repr
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _py_interop_table.map_id_offset___nonzero__(self)

    def __bool__(self):
        return _py_interop_table.map_id_offset___bool__(self)

    def __len__(self):
        return _py_interop_table.map_id_offset___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _py_interop_table.map_id_offset___getitem__(self, key)

    def __delitem__(self, key):
        return _py_interop_table.map_id_offset___delitem__(self, key)

    def has_key(self, key):
        return _py_interop_table.map_id_offset_has_key(self, key)

    def keys(self):
        return _py_interop_table.map_id_offset_keys(self)

    def values(self):
        return _py_interop_table.map_id_offset_values(self)

    def items(self):
        return _py_interop_table.map_id_offset_items(self)

    def __contains__(self, key):
        return _py_interop_table.map_id_offset___contains__(self, key)

    def key_iterator(self):
        return _py_interop_table.map_id_offset_key_iterator(self)

    def value_iterator(self):
        return _py_interop_table.map_id_offset_value_iterator(self)

    def __setitem__(self, *args):
        return _py_interop_table.map_id_offset___setitem__(self, *args)

    def asdict(self):
        return _py_interop_table.map_id_offset_asdict(self)

    def __init__(self, *args):
        this = _py_interop_table.new_map_id_offset(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _py_interop_table.map_id_offset_empty(self)

    def size(self):
        return _py_interop_table.map_id_offset_size(self)

    def swap(self, v):
        return _py_interop_table.map_id_offset_swap(self, v)

    def rbegin(self):
        return _py_interop_table.map_id_offset_rbegin(self)

    def rend(self):
        return _py_interop_table.map_id_offset_rend(self)

    def clear(self):
        return _py_interop_table.map_id_offset_clear(self)

    def get_allocator(self):
        return _py_interop_table.map_id_offset_get_allocator(self)

    def count(self, x):
        return _py_interop_table.map_id_offset_count(self, x)

    def erase(self, *args):
        return _py_interop_table.map_id_offset_erase(self, *args)

    def find(self, x):
        return _py_interop_table.map_id_offset_find(self, x)

    def lower_bound(self, x):
        return _py_interop_table.map_id_offset_lower_bound(self, x)

    def upper_bound(self, x):
        return _py_interop_table.map_id_offset_upper_bound(self, x)
    __swig_destroy__ = _py_interop_table.delete_map_id_offset
    __del__ = lambda self: None
map_id_offset_swigregister = _py_interop_table.map_id_offset_swigregister
map_id_offset_swigregister(map_id_offset)

LaneColumn = _py_interop_table.LaneColumn
TileColumn = _py_interop_table.TileColumn
CycleColumn = _py_interop_table.CycleColumn
ReadColumn = _py_interop_table.ReadColumn
CycleWithinReadColumn = _py_interop_table.CycleWithinReadColumn
DensityKPermm2Column = _py_interop_table.DensityKPermm2Column
DensityPfKPermm2Column = _py_interop_table.DensityPfKPermm2Column
ClusterCountKColumn = _py_interop_table.ClusterCountKColumn
ClusterCountPfKColumn = _py_interop_table.ClusterCountPfKColumn
PercentPassFilterColumn = _py_interop_table.PercentPassFilterColumn
PercentAlignedColumn = _py_interop_table.PercentAlignedColumn
LegacyPhasingRateColumn = _py_interop_table.LegacyPhasingRateColumn
LegacyPrephasingRateColumn = _py_interop_table.LegacyPrephasingRateColumn
ErrorRateColumn = _py_interop_table.ErrorRateColumn
PercentGreaterThanQ20Column = _py_interop_table.PercentGreaterThanQ20Column
PercentGreaterThanQ30Column = _py_interop_table.PercentGreaterThanQ30Column
P90Column = _py_interop_table.P90Column
PercentNoCallsColumn = _py_interop_table.PercentNoCallsColumn
PercentBaseColumn = _py_interop_table.PercentBaseColumn
FwhmColumn = _py_interop_table.FwhmColumn
CorrectedColumn = _py_interop_table.CorrectedColumn
CalledColumn = _py_interop_table.CalledColumn
SignalToNoiseColumn = _py_interop_table.SignalToNoiseColumn
PhasingWeightColumn = _py_interop_table.PhasingWeightColumn
PrephasingWeightColumn = _py_interop_table.PrephasingWeightColumn
PhasingSlopeColumn = _py_interop_table.PhasingSlopeColumn
PhasingOffsetColumn = _py_interop_table.PhasingOffsetColumn
PrephasingSlopeColumn = _py_interop_table.PrephasingSlopeColumn
PrephasingOffsetColumn = _py_interop_table.PrephasingOffsetColumn
MinimumContrastColumn = _py_interop_table.MinimumContrastColumn
MaximumContrastColumn = _py_interop_table.MaximumContrastColumn
SurfaceColumn = _py_interop_table.SurfaceColumn
SwathColumn = _py_interop_table.SwathColumn
SectionColumn = _py_interop_table.SectionColumn
TileNumberColumn = _py_interop_table.TileNumberColumn
ClusterCountOccupiedKColumn = _py_interop_table.ClusterCountOccupiedKColumn
PercentOccupiedColumn = _py_interop_table.PercentOccupiedColumn
ImagingColumnCount = _py_interop_table.ImagingColumnCount
UnknownColumnId = _py_interop_table.UnknownColumnId
class imaging_column(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, imaging_column, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, imaging_column, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _py_interop_table.new_imaging_column(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def name(self):
        return _py_interop_table.imaging_column_name(self)

    def has_children(self):
        return _py_interop_table.imaging_column_has_children(self)

    def subcolumns(self):
        return _py_interop_table.imaging_column_subcolumns(self)

    def full_name(self, sub_index):
        return _py_interop_table.imaging_column_full_name(self, sub_index)

    def offset(self, *args):
        return _py_interop_table.imaging_column_offset(self, *args)

    def id(self, *args):
        return _py_interop_table.imaging_column_id(self, *args)

    def parse_header_for_id(self, header):
        return _py_interop_table.imaging_column_parse_header_for_id(self, header)

    def size(self):
        return _py_interop_table.imaging_column_size(self)

    def column_count(self):
        return _py_interop_table.imaging_column_column_count(self)
    if _newclass:
        to_header = staticmethod(_py_interop_table.imaging_column_to_header)
    else:
        to_header = _py_interop_table.imaging_column_to_header
    if _newclass:
        to_name = staticmethod(_py_interop_table.imaging_column_to_name)
    else:
        to_name = _py_interop_table.imaging_column_to_name
    __swig_destroy__ = _py_interop_table.delete_imaging_column
    __del__ = lambda self: None
imaging_column_swigregister = _py_interop_table.imaging_column_swigregister
imaging_column_swigregister(imaging_column)

def imaging_column_to_header(*args):
    return _py_interop_table.imaging_column_to_header(*args)
imaging_column_to_header = _py_interop_table.imaging_column_to_header

def imaging_column_to_name(*args):
    return _py_interop_table.imaging_column_to_name(*args)
imaging_column_to_name = _py_interop_table.imaging_column_to_name

class imaging_table(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, imaging_table, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, imaging_table, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _py_interop_table.new_imaging_table()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_data(self, rows, cols, data):
        return _py_interop_table.imaging_table_set_data(self, rows, cols, data)

    def at(self, r, c, subcol=0):
        return _py_interop_table.imaging_table_at(self, r, c, subcol)

    def columns(self):
        return _py_interop_table.imaging_table_columns(self)

    def empty(self):
        return _py_interop_table.imaging_table_empty(self)

    def clear(self):
        return _py_interop_table.imaging_table_clear(self)

    def column_at(self, col_index):
        return _py_interop_table.imaging_table_column_at(self, col_index)

    def column_count(self):
        return _py_interop_table.imaging_table_column_count(self)

    def total_column_count(self):
        return _py_interop_table.imaging_table_total_column_count(self)

    def row_count(self):
        return _py_interop_table.imaging_table_row_count(self)
    __swig_destroy__ = _py_interop_table.delete_imaging_table
    __del__ = lambda self: None
imaging_table_swigregister = _py_interop_table.imaging_table_swigregister
imaging_table_swigregister(imaging_table)

class imaging_table_id_less(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, imaging_table_id_less, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, imaging_table_id_less, name)
    __repr__ = _swig_repr

    def __init__(self, table):
        this = _py_interop_table.new_imaging_table_id_less(table)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _py_interop_table.delete_imaging_table_id_less
    __del__ = lambda self: None
imaging_table_id_less_swigregister = _py_interop_table.imaging_table_id_less_swigregister
imaging_table_id_less_swigregister(imaging_table_id_less)

class invalid_column_type(interop.py_interop_run.base_exception):
    __swig_setmethods__ = {}
    for _s in [interop.py_interop_run.base_exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, invalid_column_type, name, value)
    __swig_getmethods__ = {}
    for _s in [interop.py_interop_run.base_exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, invalid_column_type, name)
    __repr__ = _swig_repr

    def __init__(self, mesg):
        this = _py_interop_table.new_invalid_column_type(mesg)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __str__(self):
        return _py_interop_table.invalid_column_type___str__(self)
    __swig_destroy__ = _py_interop_table.delete_invalid_column_type
    __del__ = lambda self: None
invalid_column_type_swigregister = _py_interop_table.invalid_column_type_swigregister
invalid_column_type_swigregister(invalid_column_type)

class imaging_column_vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, imaging_column_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, imaging_column_vector, name)
    __repr__ = _swig_repr
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _py_interop_table.imaging_column_vector___nonzero__(self)

    def __bool__(self):
        return _py_interop_table.imaging_column_vector___bool__(self)

    def __len__(self):
        return _py_interop_table.imaging_column_vector___len__(self)

    def __getslice__(self, i, j):
        return _py_interop_table.imaging_column_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _py_interop_table.imaging_column_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _py_interop_table.imaging_column_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _py_interop_table.imaging_column_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _py_interop_table.imaging_column_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _py_interop_table.imaging_column_vector___setitem__(self, *args)

    def pop(self):
        return _py_interop_table.imaging_column_vector_pop(self)

    def append(self, x):
        return _py_interop_table.imaging_column_vector_append(self, x)

    def empty(self):
        return _py_interop_table.imaging_column_vector_empty(self)

    def size(self):
        return _py_interop_table.imaging_column_vector_size(self)

    def swap(self, v):
        return _py_interop_table.imaging_column_vector_swap(self, v)

    def rbegin(self):
        return _py_interop_table.imaging_column_vector_rbegin(self)

    def rend(self):
        return _py_interop_table.imaging_column_vector_rend(self)

    def clear(self):
        return _py_interop_table.imaging_column_vector_clear(self)

    def get_allocator(self):
        return _py_interop_table.imaging_column_vector_get_allocator(self)

    def pop_back(self):
        return _py_interop_table.imaging_column_vector_pop_back(self)

    def erase(self, *args):
        return _py_interop_table.imaging_column_vector_erase(self, *args)

    def __init__(self, *args):
        this = _py_interop_table.new_imaging_column_vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _py_interop_table.imaging_column_vector_push_back(self, x)

    def front(self):
        return _py_interop_table.imaging_column_vector_front(self)

    def back(self):
        return _py_interop_table.imaging_column_vector_back(self)

    def assign(self, n, x):
        return _py_interop_table.imaging_column_vector_assign(self, n, x)

    def resize(self, *args):
        return _py_interop_table.imaging_column_vector_resize(self, *args)

    def insert(self, *args):
        return _py_interop_table.imaging_column_vector_insert(self, *args)

    def reserve(self, n):
        return _py_interop_table.imaging_column_vector_reserve(self, n)

    def capacity(self):
        return _py_interop_table.imaging_column_vector_capacity(self)
    __swig_destroy__ = _py_interop_table.delete_imaging_column_vector
    __del__ = lambda self: None
imaging_column_vector_swigregister = _py_interop_table.imaging_column_vector_swigregister
imaging_column_vector_swigregister(imaging_column_vector)


def populate_imaging_table_data(metrics, columns, row_offset, data_beg):
    return _py_interop_table.populate_imaging_table_data(metrics, columns, row_offset, data_beg)
populate_imaging_table_data = _py_interop_table.populate_imaging_table_data

def count_table_rows(metrics, row_offset):
    return _py_interop_table.count_table_rows(metrics, row_offset)
count_table_rows = _py_interop_table.count_table_rows

def count_table_columns(columns):
    return _py_interop_table.count_table_columns(columns)
count_table_columns = _py_interop_table.count_table_columns

def create_imaging_table(metrics, table):
    return _py_interop_table.create_imaging_table(metrics, table)
create_imaging_table = _py_interop_table.create_imaging_table

def list_imaging_table_metrics_to_load(valid_to_load):
    return _py_interop_table.list_imaging_table_metrics_to_load(valid_to_load)
list_imaging_table_metrics_to_load = _py_interop_table.list_imaging_table_metrics_to_load

def max_digits():
    return _py_interop_table.max_digits()
max_digits = _py_interop_table.max_digits

def get_column_rounding(index):
    return _py_interop_table.get_column_rounding(index)
get_column_rounding = _py_interop_table.get_column_rounding

def populate_column_offsets(columns):
    return _py_interop_table.populate_column_offsets(columns)
populate_column_offsets = _py_interop_table.populate_column_offsets

def create_imaging_table_columns(*args):
    return _py_interop_table.create_imaging_table_columns(*args)
create_imaging_table_columns = _py_interop_table.create_imaging_table_columns
# This file is compatible with both classic and new-style classes.


