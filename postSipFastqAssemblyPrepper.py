#! /usr/bin/env python

import sys, os, re, shutil, errno
from glob import glob
from multiprocessing import Pool
from argparse import ArgumentParser

#Parser for arguments
parser = ArgumentParser(description='Takes fastq files generated by GeneSipping and performs necessary actions '
                                    'to get ready for a single-end SPAdes assembly')
parser.add_argument('-p', '--path', required=True, help='Specify path to place files')
parser.add_argument('-P', '--PerlScript', required=True, help='Specify name and location of Perl script '
                                    'responsible for generating fastq files')
parser.add_argument('-m', '--MiSeqPath', required=True, help='Location of mounted MiSeq output folder')
parser.add_argument('-f', '--folderPath', required=True, help='The path of the folder in which to '
                                    'create the output folder')
parser.add_argument('-o', '--outPath', required=True, help='The name of the output folder')
parser.add_argument('-r', '--readLength', required=False, help='Optional. Specify the length of forward reads to use')
parser.add_argument('-j', '--proJect', required=False, help='Optional. Specify the name of the project')
parser.add_argument('-d', '--directoryPath', required=False, help='Optional. Specify the name of the directory '
                                    'containing the run of interest')

# Get the arguments into a list
args = vars(parser.parse_args())

# Define variables from the arguments - there may be a more streamlined way to do this
path = args['path']
PerlScript = args['PerlScript']
miseqPath = args['MiSeqPath']
folderPath = args['folderPath']
outPath = args['outPath']
readLength = args['readLength']
project = args['proJect']
folder = args['directoryPath']


def make_path(inPath):
    """from: http://stackoverflow.com/questions/273192/check-if-a-directory-exists-and-create-it-if-necessary \
    does what is indicated by the URL"""
    try:
        os.makedirs(inPath)
        os.chmod(inPath, 0775)
    except OSError as exception:
        if exception.errno != errno.EEXIST:
            raise


def run():
    # Import the folder variable
    global folder
    # If the folder (-d) flag was not provided, then the default way to determine which folder to process is to
    # use the most recent folder (folders are named chronologically) in the miseqPath
    if not folder:
        os.chdir(miseqPath)
        # Glob all folders into a list
        folders = glob("*/")
        # Most recent folder is the last one in a sorted list
        folder = sorted(folders)[-1]
        print folder
    # Define necessary variables
    # Output folder will have a similar format to the normal folders in the WGS_Spades folder,
    # but with an underscore prior to the day (2015-04_08)
    outputFolder = "20%s-%s_%s" % (folder[:2], folder[2:4], folder[4:6])
    # spadesFolder includes the path as well as outputFolder
    spadesFolder = "%s/%s" % (path, outputFolder)
    print spadesFolder
    # Make the appropriate folder. I couldn't get symbolic links to work with this script.
    # As a workaround on how the cluster searches for folders to process, I add a BestAssemblies folder now,
    # and remove it at the end after all the files have been copied to the destination folder
    make_path("%s/BestAssemblies" % spadesFolder)
    # Enter the folder in the miseq path, which contains the necessary files for running the Spades pipeline
    os.chdir("%s/%s" % (miseqPath, folder))
    # Copy the files to spadesFolder
    shutil.copy("SampleSheet.csv", spadesFolder)
    shutil.copy("RunInfo.xml", spadesFolder)
    # Prepare the command for running the Perl script prepareFastqFiles.pl. This script is the frontend of geneSippr;
    # it creates fastq.gz files using bcl2fastq, but does not performing any "sipping"
    geneSipprCommand = "perl %s -m %s -f %s -o %s -r %s -p %s -d %s" % (PerlScript, miseqPath, folderPath, outPath,
                            readLength, project, folder)
    # Run the command
    os.system(geneSipprCommand)
    # The fastq.gz files are located in a specific folder
    fileLocation = "%s/%s/%s/Project_%s/query" % (folderPath, folder, outPath, project)
    # Enter the folder
    os.chdir(fileLocation)
    # Get a list of all the .gz files
    gzFiles = glob("*.gz")
    # For every .gz file, if it is not already present in the destination folder, copy it there
    for file in sorted(gzFiles):
        if not os.path.isfile("%s/%s" % (spadesFolder, file)):
            print "%s/%s" % (spadesFolder, file)
            shutil.copy("%s/%s" % (fileLocation, file), "%s/%s" % (spadesFolder, file))
    # Remove the BestAssemblies folder, so that these files can be located by autoRunPipelineDockerBackup.py,
    # and assembled by the Spades pipeline
    shutil.rmtree("%s/BestAssemblies" % spadesFolder)

run()